# NOTE: Use the docker-up-local.sh bash script to actually docker up the local environment
# NOTE: This is meant for creating a local/entirely contained docker environment
version: "3.8"
services:
  stream-redis:
    image: redis
    container_name: stream-redis
    ports:
      - "26379:6379"
  stream-zookeeper:
    image: wurstmeister/zookeeper
    container_name: stream-zookeeper
    ports:
      - 2181
  stream-kafka:
    container_name: stream-kafka
    image: wurstmeister/kafka
    depends_on:
      - stream-zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_CREATE_TOPICS: "stream-snippets:1:1"
      KAFKA_ZOOKEEPER_CONNECT: stream-zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: EXTERNAL_SAME_HOST://0.0.0.0:29092,INTERNAL://0.0.0.0:9092 # stream-kafka
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://stream-kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  stream-prometheus:
    image: prom/prometheus
    container_name: stream-prometheus
    ports:
      - 29090:9090
    restart: unless-stopped
    volumes:
      - ./lib/prometheus:/etc/prometheus
      - prometheus:/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
  stream-api:
    build:
      context: .
      args:
        buildconfig: Release
      dockerfile: ./Dockerfile
    restart: on-failure
    container_name: stream-api
    ports:
      - 8082:8082
    environment:
      STREAM_CONNECTIONSTRINGS__KAFKA: stream-kafka:9092
      STREAM_CONNECTIONSTRINGS__REDIS: stream-redis:6379
    depends_on:
      - stream-zookeeper
      - stream-kafka
    healthcheck:
      interval: 99s
      retries: 2
      timeout: 19s
      test: curl --fail -s http://localhost:8082/ping || exit 1
volumes:
  prometheus:
